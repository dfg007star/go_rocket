# ===============================
# БАЗОВАЯ КОНФИГУРАЦИЯ ENVOY PROXY
# ===============================

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8081

static_resources:
  listeners:
    - name: go_rocket_http_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: go_rocket_http
                route_config:
                  name: go_rocket_routes
                  virtual_hosts:
                    - name: go_rocket_service
                      domains: ["*"]
                      # ===============================
                      # CORS НАСТРОЙКИ
                      # ===============================
                      cors:
                        # Разрешаем CORS для веб-приложений
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: custom-header-1,grpc-status,grpc-message
                      routes:
                        # Маршруты для Order Service
                        - match:
                            prefix: "/api/v1/orders"
                          route:
                            cluster: order_api_cluster
                            timeout: 15s

                        # Маршруты для Inventory Service (HTTP-JSON to gRPC)
                        - match:
                            prefix: "/api/v1/inventory"
                          route:
                            cluster: inventory_grpc_cluster
                            timeout: 10s

                        # Health check эндпоинт - БЕЗ аутентификации
                        - match:
                            path: "/health"
                          route:
                            cluster: order_api_cluster
                            timeout: 5s
                          # Отключаем авторизацию для health check
                          typed_per_filter_config:
                            envoy.filters.http.ext_authz:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                              disabled: true

                        # Маршрут по умолчанию
                        - match:
                            prefix: "/"
                          direct_response:
                            status: 404
                            body:
                              inline_string: |
                                {
                                  "error": "Not Found",
                                  "message": "Available endpoints: /api/v1/orders, /api/v1/inventory"
                                }

                http_filters:
                  # 1. CORS фильтр
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors

                  # 2. ⚠️ EXTERNAL AUTHORIZATION (gRPC)
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz

                      # ⚠️ ИСПОЛЬЗУЕМ gRPC СЕРВИС (IAM напрямую)
                      grpc_service:
                        envoy_grpc:
                          cluster_name: iam_grpc_cluster
                        timeout: 2s  # Таймаут для gRPC вызова

                      # КРИТИЧНО: Запрещать доступ если auth сервис недоступен
                      failure_mode_allow: false

                      # Включать тело запроса в авторизацию (для POST/PUT)
                      with_request_body:
                        max_request_bytes: 8192
                        allow_partial_message: true
                        pack_as_bytes: false

                      # Передаем метаданные о запросе
                      include_peer_certificate: false

                      # Заголовки, которые отправляем в auth service
                      allowed_headers:
                        patterns:
                          - exact: "authorization"     # Bearer token
                          - exact: "cookie"           # Session cookies
                          - exact: "session-uuid"     # Кастомный заголовок
                          - exact: "x-session-id"     # Альтернативный заголовок
                          - exact: "user-agent"       # Для аналитики
                          - exact: "x-forwarded-for"  # IP адрес клиента
                          - exact: "x-real-ip"        # Реальный IP
                          - exact: "host"             # Хост

                  # gRPC-JSON транскодер для Inventory
                  - name: envoy.filters.http.grpc_json_transcoder
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                      proto_descriptor: "/etc/envoy/inventory_descriptor.pb"
                      services: ["inventory.v1.InventoryService"]
                      print_options:
                        add_whitespace: true
                        always_print_primitive_fields: true
                        always_print_enums_as_ints: false
                        preserve_proto_field_names: false

                  # Router фильтр должен быть последним
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  # ===============================
  # CLUSTERS
  # ===============================
  clusters:
    # Order API Cluster (HTTP)
    - name: order_api_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      health_checks:
        - timeout: 3s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: "/api/v1/orders/healthcheck"
      load_assignment:
        cluster_name: order_api_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: order-api
                      port_value: 8080

    # Inventory gRPC Cluster
    - name: inventory_grpc_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}  # Включаем HTTP/2 для gRPC
      health_checks:
        - timeout: 3s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          grpc_health_check:
            service_name: "inventory.v1.InventoryService"
      load_assignment:
        cluster_name: inventory_grpc_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
              address:
                socket_address:
                  address: inventory-service
                  port_value: 50051  # Стандартный порт для gRPC

    - name: iam_grpc_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN

      # HTTP/2 обязательно для gRPC
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              # Настройки HTTP/2 для оптимальной производительности
              max_concurrent_streams: 100
              initial_stream_window_size: 65536
              initial_connection_window_size: 1048576

      # Connection pooling для производительности
      circuit_breakers:
        thresholds:
          - priority: DEFAULT
            max_connections: 10          # Ограничиваем количество соединений
            max_pending_requests: 50     # Очередь запросов
            max_requests: 100           # Максимальные активные запросы
            max_retries: 3              # Максимальные retry попытки
            track_remaining: true

      # Настройки соединений
      upstream_connection_options:
        tcp_keepalive:
          keepalive_probes: 3
          keepalive_time: 30
          keepalive_interval: 5

      # Health checking для IAM сервиса
      health_checks:
        - timeout: 1s
          interval: 5s
          unhealthy_threshold: 2
          healthy_threshold: 2
          grpc_health_check:
            service_name: "iam.v1.IAMService"

      # Endpoint IAM gRPC сервиса
      load_assignment:
        cluster_name: iam_grpc_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
              address:
                socket_address:
                  address: iam-grpc-server  # Docker service name
                  port_value: 50052         # gRPC порт IAM сервиса

# ===============================
# ПОТОК ОБРАБОТКИ ЗАПРОСА:
# ===============================
# 1. Клиент отправляет HTTP запрос на localhost:8080
# 2. Envoy принимает запрос через weather_api_listener
# 3. HTTP Connection Manager парсит HTTP запрос
# 4. Router фильтр применяет правила маршрутизации из route_config
# 5. Если путь начинается с /api/v1/weather — перенаправляем на weather_api_cluster
# 6. Envoy выбирает healthy endpoint из кластера (используя Round Robin)
# 7. Отправляет запрос на weather-api:8080
# 8. Получает ответ от weather API и передаёт его клиенту

# ===============================
# ДЛЯ ПРОДАКШЕНА НУЖНО ДОБАВИТЬ:
# ===============================
# - Circuit breakers для защиты от перегрузки
# - CORS настройки для веб-приложений
# - TLS/SSL сертификаты для HTTPS
# - Rate limiting для защиты от DDoS
# - Detailed logging и tracing
# - Retry policies для надежности
# - Health check настройки под ваш SLA

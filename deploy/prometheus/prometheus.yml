# =============================================================================
# КОНФИГУРАЦИЯ PROMETHEUS - СИСТЕМА СБОРА И ХРАНЕНИЯ МЕТРИК
# =============================================================================
# 
# Prometheus - это база данных временных рядов (time series database), которая:
# 1. Собирает метрики с различных сервисов (scraping)
# 2. Хранит их в оптимизированном формате
# 3. Предоставляет язык запросов PromQL для анализа данных
# 4. Может отправлять алерты при превышении пороговых значений
#
# OpenTelemetry Collector отправляет метрики в Prometheus через remote write API
# Prometheus НЕ делает scraping - все данные приходят через remote write

# =============================================================================
# ГЛОБАЛЬНЫЕ НАСТРОЙКИ
# =============================================================================
# Эти настройки применяются ко всем операциям Prometheus по умолчанию
global:
  # evaluation_interval - как часто Prometheus будет проверять правила алертов
  # Правила алертов проверяют условия типа "если CPU > 80% в течение 5 минут - отправить алерт"
  # В нашем базовом сценарии алертов пока нет, но настройка нужна для будущего расширения
  evaluation_interval: 15s

# =============================================================================
# КОНФИГУРАЦИЯ СБОРА МЕТРИК (SCRAPE CONFIGS)
# =============================================================================
# В нашем сценарии scrape_configs НЕ ИСПОЛЬЗУЕТСЯ!
# Все метрики приходят от OpenTelemetry Collector через remote write API
# Это означает, что Prometheus работает в режиме "приемника" данных,
# а не активного сборщика (scraper)
scrape_configs:
  # Оставляем только базовый scraping для самого Prometheus
  # Это нужно для мониторинга состояния самого Prometheus
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']  # Prometheus слушает на порту 9090
    # Редкий интервал сбора - метрики Prometheus не критичны для бизнеса
    scrape_interval: 30s

# =============================================================================
# ПРАВИЛА АЛЕРТОВ (RULE FILES)
# =============================================================================
# rule_files определяет файлы с правилами для алертов и записи (recording rules)
# В базовом сценарии алертов нет, но секция нужна для будущего расширения
rule_files:
  # В базовом сценарии алертов нет, но секция нужна для будущего расширения
  # Раскомментируйте и создайте файл alert_rules.yml для добавления алертов
  # - "alert_rules.yml"

# =============================================================================
# REMOTE WRITE ENDPOINT
# =============================================================================
# Prometheus автоматически предоставляет endpoint /api/v1/write для приема данных
# OpenTelemetry Collector будет отправлять метрики именно на этот endpoint
# Никаких дополнительных настроек не требуется - все работает "из коробки"

# =============================================================================
# ВАЖНЫЕ КОНЦЕПЦИИ ДЛЯ НАШЕГО СЦЕНАРИЯ:
# =============================================================================
#
# 1. REMOTE WRITE vs SCRAPING:
#    - Scraping: Prometheus активно опрашивает сервисы (pull модель)
#    - Remote Write: Сервисы отправляют данные в Prometheus (push модель)
#    - Мы используем Remote Write через OpenTelemetry Collector
#
# 2. FLOW ДАННЫХ:
#    - UFO App генерирует метрики и отправляет в OpenTelemetry Collector
#    - OpenTelemetry Collector обрабатывает и отправляет в Prometheus
#    - Prometheus хранит данные и предоставляет их Grafana
#    - Grafana визуализирует данные в дашбордах
#
# 3. ПРЕИМУЩЕСТВА ТАКОЙ СХЕМЫ:
#    - Централизованная обработка телеметрии в OpenTelemetry Collector
#    - Возможность трансформации данных перед отправкой в Prometheus
#    - Буферизация и retry логика в случае недоступности Prometheus
#    - Единая точка конфигурации для всех типов телеметрии
#
# 4. МЕТРИКИ, КОТОРЫЕ БУДУТ ПОСТУПАТЬ:
#    - Системные метрики: CPU, память, горутины
#    - HTTP/gRPC метрики: количество запросов, время ответа, коды ошибок
#    - Бизнес-метрики: количество обработанных UFO наблюдений
#    - Метрики базы данных: время выполнения запросов, пул соединений

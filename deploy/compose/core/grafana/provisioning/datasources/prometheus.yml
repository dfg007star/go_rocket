# =============================================================================
# КОНФИГУРАЦИЯ DATASOURCES GRAFANA - ИСТОЧНИКИ ДАННЫХ ДЛЯ ВИЗУАЛИЗАЦИИ
# =============================================================================
#
# Datasource в Grafana - это подключение к источнику данных (базе данных, API)
# Grafana может подключаться к Prometheus, InfluxDB, MySQL, Elasticsearch и многим другим
#
# Основные концепции:
# 1. DATASOURCE - подключение к источнику данных
# 2. QUERY - запрос к источнику данных (в нашем случае PromQL)
# 3. PANEL - визуальный элемент дашборда (график, таблица, gauge)
# 4. DASHBOARD - набор панелей для мониторинга
# 5. PROVISIONING - автоматическая настройка через конфигурационные файлы
#
# В нашей схеме: UFO App -> OpenTelemetry Collector -> Prometheus -> Grafana
# Grafana подключается к Prometheus для получения метрик и их визуализации

# API версия для совместимости
# Grafana использует версионирование конфигурации для обратной совместимости
apiVersion: 1

# =============================================================================
# СПИСОК ИСТОЧНИКОВ ДАННЫХ (DATASOURCES)
# =============================================================================
# Каждый datasource - это отдельное подключение к источнику данных
# Можно настроить несколько datasources разных типов или к разным экземплярам
datasources:
  # ОСНОВНОЙ PROMETHEUS DATASOURCE
  # Это главный источник метрик для нашей системы мониторинга
  - name: 'Prometheus'  # Имя, которое будет отображаться в Grafana UI
    
    # Тип источника данных - определяет, как Grafana будет взаимодействовать с источником
    # prometheus - встроенный тип для работы с Prometheus через HTTP API
    type: prometheus
    
    # Режим доступа к данным:
    # - proxy: Grafana сервер делает запросы к datasource (рекомендуется)
    # - direct: браузер пользователя напрямую обращается к datasource
    # Proxy режим безопаснее и позволяет использовать внутренние сети
    access: proxy
    
    # URL для подключения к Prometheus
    # Grafana будет делать HTTP запросы к этому адресу
    # В Docker Compose prometheus - это имя сервиса, Docker резолвит его в IP
    url: 'http://prometheus:9090'
    
    # Сделать этот datasource источником по умолчанию
    # При создании новых панелей будет автоматически выбран этот datasource
    isDefault: true
    
    # =============================================================================
    # НАСТРОЙКИ АУТЕНТИФИКАЦИИ
    # =============================================================================
    # Basic Auth - простая HTTP аутентификация (username/password)
    # В нашем случае Prometheus не требует аутентификации
    basicAuth: false
    
    # =============================================================================
    # НАСТРОЙКИ HTTP ЗАПРОСОВ И ДОПОЛНИТЕЛЬНЫЕ ПАРАМЕТРЫ
    # =============================================================================
    # Конфигурация того, как Grafana будет делать запросы к Prometheus
    jsonData:
      # HTTP метод для запросов к Prometheus
      # POST рекомендуется для сложных запросов с длинными PromQL выражениями
      # GET подходит для простых запросов, но имеет ограничения по длине URL
      httpMethod: POST
      
    # =============================================================================
    # ИДЕНТИФИКАЦИЯ DATASOURCE
    # =============================================================================
    # UID (Unique Identifier) - уникальный идентификатор datasource
    # Используется в JSON дашбордов для ссылки на этот datasource
    # Позволяет переносить дашборды между инсталляциями Grafana
    uid: prometheus-uid

# =============================================================================
# ВАЖНЫЕ КОНЦЕПЦИИ GRAFANA:
# =============================================================================
#
# 1. PROMQL (PROMETHEUS QUERY LANGUAGE):
#    - rate(http_requests_total[5m]) - скорость запросов за 5 минут
#    - avg(cpu_usage) by (instance) - средний CPU по инстансам
#    - histogram_quantile(0.95, request_duration_bucket) - 95-й перцентиль времени ответа
#
# 2. ВРЕМЕННЫЕ ИНТЕРВАЛЫ:
#    - [5m] - данные за последние 5 минут
#    - [1h] - данные за последний час
#    - [1d] - данные за последний день
#
# 3. АГРЕГАЦИЯ:
#    - sum() - сумма значений
#    - avg() - среднее значение
#    - max()/min() - максимум/минимум
#    - count() - количество элементов
#
# 4. ГРУППИРОВКА:
#    - by (label) - группировать по лейблу
#    - without (label) - группировать исключая лейбл
#
# 5. ФУНКЦИИ ВРЕМЕНИ:
#    - rate() - скорость изменения для счетчиков
#    - irate() - мгновенная скорость
#    - increase() - увеличение за период
#    - delta() - изменение для gauge метрик
#
# 6. ТИПЫ ПАНЕЛЕЙ:
#    - Time Series - временные ряды (графики)
#    - Stat - одиночные значения
#    - Gauge - индикаторы с пороговыми значениями
#    - Table - табличное представление
#    - Heatmap - тепловые карты для гистограмм 

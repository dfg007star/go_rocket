# =============================================================================
# КОНФИГУРАЦИЯ DASHBOARD PROVISIONING GRAFANA - АВТОМАТИЧЕСКАЯ ЗАГРУЗКА ДАШБОРДОВ
# =============================================================================
#
# Dashboard Provisioning - это механизм автоматической загрузки дашбордов в Grafana
# Вместо ручного создания дашбордов через UI, можно подготовить JSON файлы
# и настроить их автоматическую загрузку при старте Grafana
#
# Преимущества provisioning:
# 1. ВЕРСИОНИРОВАНИЕ - дашборды хранятся в Git вместе с кодом
# 2. ВОСПРОИЗВОДИМОСТЬ - одинаковые дашборды в разных окружениях
# 3. АВТОМАТИЗАЦИЯ - не нужно настраивать дашборды вручную
# 4. BACKUP - дашборды не теряются при пересоздании Grafana
#
# В нашей схеме: UFO App -> OpenTelemetry Collector -> Prometheus -> Grafana
# Grafana автоматически загрузит предподготовленные дашборды для мониторинга UFO сервиса

# API версия для совместимости
apiVersion: 1

# =============================================================================
# СПИСОК ПРОВАЙДЕРОВ ДАШБОРДОВ (PROVIDERS)
# =============================================================================
# Provider определяет источник дашбордов - откуда Grafana будет их загружать
# Можно настроить несколько провайдеров для разных типов дашбордов
providers:
  
  # ОСНОВНОЙ ПРОВАЙДЕР ДЛЯ ДАШБОРДОВ ПРИЛОЖЕНИЙ
  # Загружает дашборды для мониторинга UFO сервиса и бизнес-метрик
  - name: 'dashboards'  # Имя провайдера (отображается в логах Grafana)
    
    # Тип провайдера - определяет способ загрузки дашбордов
    # file - загрузка из файловой системы (JSON файлы)
    # Альтернативы: http (загрузка по HTTP), git (из Git репозитория)
    type: file
    
    # Разрешить удаление дашбордов через UI
    # false - дашборды можно удалить через Grafana интерфейс
    # true - дашборды защищены от удаления (только через provisioning)
    disableDeletion: false
    
    # Интервал проверки изменений в секундах
    # Grafana будет проверять изменения в файлах дашбордов каждые 10 секунд
    # При обнаружении изменений - автоматически перезагрузит дашборд
    updateIntervalSeconds: 10
    
    # Разрешить изменения дашбордов через UI
    # true - можно редактировать дашборды в Grafana интерфейсе
    # false - дашборды только для чтения (изменения только через файлы)
    allowUiUpdates: true
    
    # Настройки для file провайдера
    options:
      # Путь к директории с JSON файлами дашбордов
      # Grafana будет сканировать эту директорию и все поддиректории
      # Все файлы с расширением .json будут загружены как дашборды
      path: '/var/lib/grafana/dashboards'

# =============================================================================
# СТРУКТУРА ДАШБОРДА (JSON):
# =============================================================================
#
# Дашборд в Grafana - это JSON файл со следующей структурой:
#
# {
#   "dashboard": {
#     "title": "UFO Service Metrics",           // Название дашборда
#     "tags": ["ufo", "microservice"],          // Теги для поиска
#     "time": {                                 // Временной диапазон по умолчанию
#       "from": "now-1h",
#       "to": "now"
#     },
#     "panels": [                               // Массив панелей (графиков)
#       {
#         "title": "Request Rate",              // Название панели
#         "type": "timeseries",                 // Тип панели
#         "targets": [                          // Запросы к datasource
#           {
#             "expr": "rate(http_requests_total[5m])",  // PromQL запрос
#             "datasource": {
#               "uid": "prometheus-uid"          // Ссылка на datasource
#             }
#           }
#         ]
#       }
#     ]
#   }
# }
#
# =============================================================================
# ПОЛЕЗНЫЕ МЕТРИКИ ДЛЯ UFO СЕРВИСА:
# =============================================================================
#
# 1. ЗАПРОСЫ (REQUESTS):
#    - rate(grpc_server_handled_total[5m]) - скорость gRPC запросов
#    - grpc_server_handling_seconds - время обработки запросов
#    - histogram_quantile(0.95, grpc_server_handling_seconds_bucket) - 95-й перцентиль
#
# 2. ОШИБКИ (ERRORS):
#    - rate(grpc_server_handled_total{grpc_code!="OK"}[5m]) - скорость ошибок
#    - grpc_server_handled_total{grpc_code!="OK"} / grpc_server_handled_total - процент ошибок
#
# 3. СИСТЕМА (SYSTEM):
#    - process_resident_memory_bytes - использование памяти
#    - rate(process_cpu_seconds_total[5m]) - использование CPU
#    - go_goroutines - количество горутин
#
# 4. БИЗНЕС-МЕТРИКИ (BUSINESS):
#    - ufo_sightings_total - количество наблюдений НЛО
#    - ufo_sightings_by_location - наблюдения по локациям
#    - ufo_database_operations_total - операции с базой данных
#
# =============================================================================
# РЕКОМЕНДАЦИИ ПО ДАШБОРДАМ:
# =============================================================================
#
# 1. СТРУКТУРА:
#    - Группируйте панели логически (запросы, ошибки, система)
#    - Используйте строки (rows) для организации панелей
#    - Добавляйте описания к панелям
#
# 2. ВРЕМЕННЫЕ ДИАПАЗОНЫ:
#    - Используйте переменные для временных диапазонов
#    - Настройте автообновление (refresh)
#    - Добавьте быстрые ссылки (Quick ranges)
#
# 3. ПЕРЕМЕННЫЕ:
#    - Создавайте переменные для фильтрации (instance, environment)
#    - Используйте query variables для динамических списков
#    - Добавляйте multi-select для гибкости
#
# 4. АЛЕРТЫ:
#    - Настройте алерты на критичные метрики
#    - Используйте разные уровни серьезности
#    - Добавьте описания к алертам

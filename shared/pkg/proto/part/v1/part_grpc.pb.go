// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: part/v1/part.proto

// Package part.v1 отвечает за хранение и предоставление информации о деталях для сборки космических кораблей

package part_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartService_GetPart_FullMethodName   = "/part.v1.PartService/GetPart"
	PartService_ListParts_FullMethodName = "/part.v1.PartService/ListParts"
)

// PartServiceClient is the client API for PartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PartService предоставляет информацию о деталях
type PartServiceClient interface {
	// GetPart возвращает информацию о детали по её UUID
	GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error)
	// ListParts возвращает список деталей с возможностью фильтрации
	ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListPartsResponse, error)
}

type partServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartServiceClient(cc grpc.ClientConnInterface) PartServiceClient {
	return &partServiceClient{cc}
}

func (c *partServiceClient) GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartResponse)
	err := c.cc.Invoke(ctx, PartService_GetPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partServiceClient) ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListPartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartsResponse)
	err := c.cc.Invoke(ctx, PartService_ListParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartServiceServer is the server API for PartService service.
// All implementations must embed UnimplementedPartServiceServer
// for forward compatibility.
//
// PartService предоставляет информацию о деталях
type PartServiceServer interface {
	// GetPart возвращает информацию о детали по её UUID
	GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error)
	// ListParts возвращает список деталей с возможностью фильтрации
	ListParts(context.Context, *ListPartsRequest) (*ListPartsResponse, error)
	mustEmbedUnimplementedPartServiceServer()
}

// UnimplementedPartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartServiceServer struct{}

func (UnimplementedPartServiceServer) GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPart not implemented")
}
func (UnimplementedPartServiceServer) ListParts(context.Context, *ListPartsRequest) (*ListPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}
func (UnimplementedPartServiceServer) mustEmbedUnimplementedPartServiceServer() {}
func (UnimplementedPartServiceServer) testEmbeddedByValue()                     {}

// UnsafePartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartServiceServer will
// result in compilation errors.
type UnsafePartServiceServer interface {
	mustEmbedUnimplementedPartServiceServer()
}

func RegisterPartServiceServer(s grpc.ServiceRegistrar, srv PartServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartService_ServiceDesc, srv)
}

func _PartService_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartService_GetPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).GetPart(ctx, req.(*GetPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartService_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartServiceServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartService_ListParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartServiceServer).ListParts(ctx, req.(*ListPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartService_ServiceDesc is the grpc.ServiceDesc for PartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "part.v1.PartService",
	HandlerType: (*PartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPart",
			Handler:    _PartService_GetPart_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _PartService_ListParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "part/v1/part.proto",
}

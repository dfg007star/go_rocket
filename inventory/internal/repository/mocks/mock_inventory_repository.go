// Code generated for dosin service
// Â© dosin 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dfg007star/go_rocket/inventory/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// InventoryRepository is an autogenerated mock type for the InventoryRepository type
type InventoryRepository struct {
	mock.Mock
}

type InventoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InventoryRepository) EXPECT() *InventoryRepository_Expecter {
	return &InventoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, part
func (_m *InventoryRepository) Create(ctx context.Context, part *model.Part) (*model.Part, error) {
	ret := _m.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Part) (*model.Part, error)); ok {
		return rf(ctx, part)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Part) *model.Part); ok {
		r0 = rf(ctx, part)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Part) error); ok {
		r1 = rf(ctx, part)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type InventoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - part *model.Part
func (_e *InventoryRepository_Expecter) Create(ctx interface{}, part interface{}) *InventoryRepository_Create_Call {
	return &InventoryRepository_Create_Call{Call: _e.mock.On("Create", ctx, part)}
}

func (_c *InventoryRepository_Create_Call) Run(run func(ctx context.Context, part *model.Part)) *InventoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Part))
	})
	return _c
}

func (_c *InventoryRepository_Create_Call) Return(_a0 *model.Part, _a1 error) *InventoryRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Part) (*model.Part, error)) *InventoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *InventoryRepository) Get(ctx context.Context, uuid string) (*model.Part, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Part, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Part); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type InventoryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *InventoryRepository_Expecter) Get(ctx interface{}, uuid interface{}) *InventoryRepository_Get_Call {
	return &InventoryRepository_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *InventoryRepository_Get_Call) Run(run func(ctx context.Context, uuid string)) *InventoryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InventoryRepository_Get_Call) Return(_a0 *model.Part, _a1 error) *InventoryRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*model.Part, error)) *InventoryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *InventoryRepository) List(ctx context.Context, filter *model.PartsFilter) ([]*model.Part, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) ([]*model.Part, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) []*model.Part); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PartsFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InventoryRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.PartsFilter
func (_e *InventoryRepository_Expecter) List(ctx interface{}, filter interface{}) *InventoryRepository_List_Call {
	return &InventoryRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *InventoryRepository_List_Call) Run(run func(ctx context.Context, filter *model.PartsFilter)) *InventoryRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PartsFilter))
	})
	return _c
}

func (_c *InventoryRepository_List_Call) Return(_a0 []*model.Part, _a1 error) *InventoryRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryRepository_List_Call) RunAndReturn(run func(context.Context, *model.PartsFilter) ([]*model.Part, error)) *InventoryRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, part
func (_m *InventoryRepository) Update(ctx context.Context, part *model.Part) (*model.Part, error) {
	ret := _m.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Part) (*model.Part, error)); ok {
		return rf(ctx, part)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Part) *model.Part); ok {
		r0 = rf(ctx, part)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Part) error); ok {
		r1 = rf(ctx, part)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type InventoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - part *model.Part
func (_e *InventoryRepository_Expecter) Update(ctx interface{}, part interface{}) *InventoryRepository_Update_Call {
	return &InventoryRepository_Update_Call{Call: _e.mock.On("Update", ctx, part)}
}

func (_c *InventoryRepository_Update_Call) Run(run func(ctx context.Context, part *model.Part)) *InventoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Part))
	})
	return _c
}

func (_c *InventoryRepository_Update_Call) Return(_a0 *model.Part, _a1 error) *InventoryRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Part) (*model.Part, error)) *InventoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewInventoryRepository creates a new instance of InventoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryRepository {
	mock := &InventoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
